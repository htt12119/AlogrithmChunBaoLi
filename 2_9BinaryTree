/*
例2.9 假设二叉树采用二叉链存储结构，设计一个递归算法输出从根结点到值为x的结点的路径，假设二叉树中所有节点值不同，且均为单个字符，
编写一个完整的程序用相关数据进行测试。
解：这里采用求x结点的所有祖先（另加上x结点本身）的方法，用path[0..d]保存x结点及其祖先结点。设f(b,x,path,d)的功能是：若b为空树，
返回false;若b所指结点为x结点，将x结点值加入path，返回true;若b所指结点的左或右孩子是x结点或其祖先，将x结点值加入path，返回true。
判断b所指结点的左孩子是x结点或其视先表示为f(b->lchile,x,path,d),判断b所指结点时x结点或祖先表示为f(b->rchild,x,path,d)。堆应的递
归模型如下：
f(b,x,path,d) = false    当b =NULL
f(b,x,path,d) = true(并将x加入到path中)   当b->data = x
f(b,x,path,d) = true(并将b->data加入到path中) 当f(b->lchild,x,path,d)或f(b->rchild,x,path,d)为true
对应程序如下：
*/
#include <stdio.h>
#include<malloc.h>
#define MaxSize 100
typedef char ElemType;
typedef struct node
{
    ElemType data;          //数据元素
    struct node *lchild;    //指向左孩子结点
    struct node *rchild;    //指向右孩子结点
}BTNode;
void CreateBTNode(BTNode * &b,char *str)    //由str建立二叉链b
{
    BTNode *St[MaxSize],*p = NULL;
    int top = -1,k,j = 0;
    char ch;
    b = NULL;               //建立的二叉树初始时为空
    ch = str[j];
    while(ch != '\0')       //str未扫描完时
    {
        switch(ch)
        {
            case '(':top++;St[top] = p;k = 1;break;     //为左孩子结点
            case ')':top--;break;
            case ',':k = 2;break;                        //为右结点孩子
            default:p = (BTNode *)malloc(sizeof(BTNode));
                    p->data = ch;p->lchild = p->rchild = NULL;
                    if(b == NULL)                        //p为二叉树的根结点
                        b = p;
                    else
                    {
                        switch(k)
                        {
                            case 1:St[top]->lchild = p;break;
                            case 2:St[top]->rchild = p;break;
                        }
                    }
        }
        j++;
        ch = str[j];
    }
}

void DispBTNode(BTNode *b)          //采用括号表示输出二叉链b
{
    if(b != NULL)
    {
        printf("%c",b -> data);
        if(b->lchild != NULL || b->rchild != NULL)
        {
            printf("(");            //有孩子结点时才输出(
            DispBTNode(b->lchild);  //递归处理左子树
            if(b->rchild != NULL) printf(",");//有右孩子结点时才输出,
            DispBTNode(b->rchild);  //递归处理右子树
            printf(")");            //有孩子结点时才输出)
        }
    }
}
void DestroyBTNode(BTNode *&b)      //释放以*b为根结点的二叉树
{
    if(b != NULL)
    {
        DestroyBTNode(b->lchild);
        DestroyBTNode(b->rchild);
        free(b);
    }
}
bool Ancestor(BTNode *b,char x,char path[],int &d)//求根结点到x结点的路径
{
    if(b == NULL)
        return false;
    if(b->data == x)
    {
        d++;
        path[d] = x;
        return true;
    }
    else if(Ancestor(b->lchild,x,path,d) || Ancestor(b->rchild,x,path,d))
    {
        d++;path[d] = b->data;
        return true;
    }
}

void main()
{
    BTNode *b;
    char x = 'G';
    char path[MaxSize];
    int d = -1,i;
    CreateBTNode(b,"A(B(D(,G)),C(E,F))");    //由括号表示串创建二叉链
    printf("二叉树b：");
    DispBTNode(b);
    printf("\n");
    if(Ancestor(b,x,path,d))
    {
        printf("在b中找到值为%c的结点\n",x);
        printf("从根结点到%c的路径：",x);
        for(i = d;i >= 0;i--)
            printf("%c",path[i]);
        printf("\n");
    }
    else printf("在b中没有找到值为%c的结点\n",x);
    printf("销毁树b\n");
    DestroyBTNode(b);

}
